--상품 판매 테이블 만들기

DROP TABLE ITEM; --부모 (삭제 순서 : 2)
DROP TABLE SALES; --자식 (삭제 순서 : 1)

--상품 마스터
CREATE TABLE ITEM(
ITEMCODE VARCHAR2(13) NOT NULL,
ITEMNAME VARCHAR2(100) NOT NULL,
PRICE NUMBER(7) NOT NULL,
NOTE VARCHAR2(100),
REGDATE DATE DEFAULT SYSDATE,
CONSTRAINT PK_ITEMCODE PRIMARY KEY(ITEMCODE)
);

SELECT * FROM ITEM;

CREATE TABLE SALES(
SALESDATE VARCHAR2(10),
SEQ NUMBER(5), --PK(자동 NOT NULL) --순번
ITEMCODE VARCHAR2(13) NOT NULL, --마스터 테이블의 ITEMCODE와 맞추기
QTY NUMBER(3) NOT NULL,
AMOUNT NUMBER(10) NOT NULL, --판매 금액
REGDATE DATE DEFAULT SYSDATE, --등록일자(시간 포함)
CONSTRAINT PK_SALESDATE_SEQ PRIMARY KEY (SALESDATE, SEQ), --SALES 테이블의 제약조건에서 PK명을 PK_SALESDATE_SEQ로 정의하겠다.
CONSTRAINT FK_ITEMCODE_ITEM FOREIGN KEY (ITEMCODE) REFERENCES ITEM(ITEMCODE) --아이템 테이블에 있는 아이템코드를 참조하여 아이템 코드를 외래키로 잡겠다.
);

SELECT * FROM SALES;

--상품 마스터 추가
INSERT INTO ITEM (ITEMCODE, ITEMNAME, PRICE) VALUES('8801', '우산',3000);
INSERT INTO ITEM (ITEMCODE, ITEMNAME, PRICE) VALUES('8810','초콜렛',3500);
INSERT INTO ITEM (ITEMCODE, ITEMNAME, PRICE) VALUES('8811','바나나',4000);
INSERT INTO ITEM (ITEMCODE, ITEMNAME, PRICE) VALUES('8802', '샴푸',8000);
INSERT INTO ITEM (ITEMCODE, ITEMNAME, PRICE) VALUES('8803', '양말',500);
INSERT INTO ITEM (ITEMCODE, ITEMNAME, PRICE) VALUES('8812', '빵',1000);



--판매 추가
INSERT INTO SALES (SALESDATE, SEQ, ITEMCODE, QTY, AMOUNT) VALUES('2021-04-28', 1, '8810', 1,1*3500); --반드시 상품 마스터에 있는 상품코드만 적어야함.
INSERT INTO SALES (SALESDATE, SEQ, ITEMCODE, QTY, AMOUNT) VALUES('2021-04-28', 2, '8810', 3,3*3500);
INSERT INTO SALES (SALESDATE, SEQ, ITEMCODE, QTY, AMOUNT) VALUES('2021-04-29', 1, '8802', 2,2*8000);
INSERT INTO SALES (SALESDATE, SEQ, ITEMCODE, QTY, AMOUNT) VALUES('2021-04-29', 2, '8801', 5,5*3000);
INSERT INTO SALES (SALESDATE, SEQ, ITEMCODE, QTY, AMOUNT) VALUES('2021-04-29', 3, '8810', 1,1*3500);
INSERT INTO SALES (SALESDATE, SEQ, ITEMCODE, QTY, AMOUNT) VALUES('2021-04-30', 1, '8812', 2,2*1000);
INSERT INTO SALES (SALESDATE, SEQ, ITEMCODE, QTY, AMOUNT) VALUES('2021-04-30', 2, '8803', 10,10*500);


COMMIT;
ROLLBACK;

--일일 상품 판매 리스트
--판매를 보고자 하는 것이기 때문에 SALES를 기준으로 한다.
SELECT S.SALESDATE, S.SEQ, S.ITEMCODE, I.ITEMNAME, S.QTY, S.AMOUNT
FROM SALES S INNER JOIN ITEM I ON (S.ITEMCODE = I.ITEMCODE) --아이템이라는 테이블을 조인하겠다.
ORDER BY S.SALESDATE, S.SEQ;

--일일 상품별 집계 리스트
--조인하여 집계 내기 -> GROUP BY(판매날짜와 상품코드끼리 묶기)
--우선, 조인하기
--SELECT S.SALESDATE, S.SEQ, S.ITEMCODE, I.ITEMNAME, S.QTY, S.AMOUNT
--FROM SALES S INNER JOIN ITEM I ON (S.ITEMCODE = I.ITEMCODE);
--SALESDATE와 아이템 코드를 제외한 나머지는 집계 함수를 사용해야함.
SELECT S.SALESDATE, S.ITEMCODE, MAX(I.ITEMNAME)ITEMNAME, SUM(s.QTY)QTY, SUM(S.AMOUNT) AMOUNT
FROM SALES S INNER JOIN ITEM I ON (S.ITEMCODE = I.ITEMCODE)
GROUP BY S.SALESDATE, S.ITEMCODE
HAVING SUM(s.QTY) >= 2
ORDER BY S.SALESDATE, ITEMCODE ;

--상품별 집계 판매
SELECT S.ITEMCODE, I.ITEMNAME, SUM(S.QTY)QTY, SUM(S.AMOUNT) AMOUNT
FROM SALES S INNER JOIN ITEM I ON(S.ITEMCODE = I.ITEMCODE)
GROUP BY S.ITEMCODE, I.ITEMNAME
HAVING SUM(S.AMOUNT)>= 10000
ORDER BY ITEMCODE;

--서브 쿼리
--평균 판매 수량보다 적은 판매 상품 리스트
--평균 판매 수량을 먼저 구해야만 기준을 잡을 수 있음

--평균 판매 수량 구하기
SELECT AVG(QTY) AVGQTY
FROM SALES;

--상품별로 판매 수량이 평균 판매수량보다 적은 상품
--WHERE에 서브 쿼리
SELECT S.*, I.ITEMNAME
FROM SALES S INNER JOIN ITEM I ON(S.ITEMCODE = I.ITEMCODE)
WHERE QTY < (SELECT AVG(QTY) AVGQTY FROM SALES);

--상품 판매 리스트 + 평균 판매 수량
--SELECT에 서브 쿼리
SELECT S.* , I.ITEMNAME, TRUNC((SELECT AVG(QTY) AVGQTY FROM SALES),2) AS AVGQTY
FROM SALES S INNER JOIN ITEM I ON (S.ITEMCODE = I.ITEMCODE);

--더미테이블을 이용하여 테스트하기
SELECT TRUNC(2.33333,2) FROM DUAL;

--FROM에 서브 쿼리
--상품별 평균 수량 구하기
--상품 판매 리스트 + 상품별 평균(GROUP BY)
--1번
SELECT S.*, I.ITEMNAME
FROM SALES S INNER JOIN ITEM I ON (I.ITEMCODE = S.ITEMCODE);

--2번
SELECT ITEMCODE, AVG(QTY)
FROM SALES
GROUP BY ITEMCODE;

--1번과 2번 JOIN
SELECT S.*, I.ITEMNAME, IA.QTY QTYAVG
FROM SALES S INNER JOIN ITEM I ON (I.ITEMCODE = S.ITEMCODE)
INNER JOIN (SELECT ITEMCODE, AVG(QTY) QTY FROM SALES GROUP BY ITEMCODE) IA ON (S.ITEMCODE = IA.ITEMCODE);

--상품 마스터의 단가가 평균 단가보다 큰 상품 리스트
--상품 마스터의 평균 단가 테이블 + 상품 마스터 리스트
--SELECT *
--FROM ITEM
--WHERE PRICE >(SELECT AVG(PRICE) PRICEAVG FROM ITEM);

--상품 마스터 조회 + 상품별 판매 금액
--상품 마스터
SELECT I.*, S.AMOUNT
FROM ITEM I INNER JOIN (SELECT ITEMCODE, SUM(AMOUNT)AMOUNT FROM SALES GROUP BY ITEMCODE) S
ON I.ITEMCODE = S.ITEMCODE;

--상품별 판매 금액
SELECT ITEMCODE, SUM(AMOUNT)
FROM SALES 
GROUP BY ITEMCODE;

     SELECT I.ITEMCODE, I.ITEMNAME, I.PRICE, NVL(I.NOTE, ' ') NOTE , NVL(S.AMOUNT, 0) AMOUNT, I.REGDATE  --NULL값이 있다면 0을 넣어주세요.
      FROM ITEM I LEFT JOIN
                      (SELECT ITEMCODE, SUM(AMOUNT)AMOUNT
                       FROM SALES
                       WHERE SALESDATE = '2021-04-29'
                       GROUP BY ITEMCODE) S
          ON I.ITEMCODE = S.ITEMCODE
ORDER BY ITEMCODE;

COMMIT;















